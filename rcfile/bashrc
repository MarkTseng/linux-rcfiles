#!/bin/bash

# If not running interactively, don't do anything. 
# This snippet helps to fix scp, sftp "Received message too long" issue..
[ -z "$PS1" ] && return

# Source global definitions

[ -f /etc/bashrc ] && . /etc/bashrc
[ -f /etc/profile ] && . /etc/profile

export TERM=xterm-256color
export EDITOR=vim
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

export dotfiles="$HOME/.vim"

exist () { type "$1" &> /dev/null; }
#######################
# JOB Related         # 
#######################

#export MAKEINC=/home/project/makcomm
export LINTDIR=/usr/share/pclint
export MANSECT=8:2:1:3:4:5:6:7:9:0p:1p:3p:tcl:n:l:p:o

###############################
# Different OS specific stuff #
###############################

OS=$(uname)             # for resolving pesky os differing switches

case $OS in
    Darwin|*BSD)
        # MacPorts stuff 
        if [ -x /opt/local/bin/port ]; then
            export PATH=/opt/local/libexec/gnubin:/opt/local/bin:/opt/local/sbin:$PATH
            export MANPATH=/opt/local/share/man:$MANPATH

            # bash_completion if installed 
            if [ -x /opt/local/etc/bash_completion ]; then
                . /opt/local/etc/bash_completion
            fi
        fi

        # Homebrew stuff 
        if [ -x /usr/local/bin/brew ]; then
			export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/opt/findutils/libexec/gnubin:$PATH
            export MANPATH=/usr/local/share/man:$MANPATH

            # bash_completion if installed 
			HOMEBREW_PREFIX=$(brew --prefix)
			if type brew &>/dev/null; then
				if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
					source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
				else
					for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
						[[ -r "$COMPLETION" ]] && source "$COMPLETION"
					done
				fi
			fi 
        fi

        # PATH
        export PATH=$HOME/Tools:$HOME/Tools/subversion-scripts:$HOME/Tools/git-scripts:$HOME/usr/bin:$PATH
        # MANPATH
        export MANPATH=$HOME/usr/man:$HOME/usr/share/man:$MANPATH
        ;;

    Linux)
        # enable color support of ls and also add handy aliases
        if [ "$TERM" != "dumb" ]; then
            eval `dircolors -b`
        fi

        # Note that, Ubuntu have been already done sourcing /etc/bash_completion in /etc/profile,
        # Source this file twice will cause user fail to login GNOME.
        # You can check this file ~/.xsession-errors to find out why you login GNOME failed.
        IsUbuntu=$(lsb_release -a | grep Ubuntu)
        # enable bash completion 
        if [ -z "$IsUbuntu" ] && [ -f /etc/bash_completion ]; then
            . /etc/bash_completion
        fi
        # MANPATH
        export MANPATH=$HOME/usr/man:$HOME/usr/share/man:$HOME/usr/cpan/share/man:$MANPATH

        ;;

    *)
        echo "Your OS Type is : `uname -s`"
        # openbsd doesn't do much for color, some others may..
        export CLICOLOR=1
        ;;
esac

#######################
# Alias               # 
#######################

# enable color for LS 
case $OS in
    Darwin|*BSD)
        export CLICOLOR=1
        export LSCOLORS=ExFxCxDxBxegedabagacad
        #alias ls='ls -FG'
        # By installing Macports: GNU coreutils, alias as Linux-way
        alias ls='ls -FN --color=auto --time-style=long-iso'
        ;;
    Linux)
        alias ls='ls -FN --color=auto --time-style=long-iso'
        ;;
esac

alias l='ls -FG'
alias ll='ls -al'                   # long list format
alias lk='ls -lk'                   # --block-size=1K
alias lt='ls -ltr'                  # sort by date (mtime)
alias lc='ls -ltcr'                 # sort by and show change time
alias la='ls -ltur'                 # sort by and show access time
alias lx='ls -lXB'                  # sort by extension
alias lz='ls -lSr'                  # sort by size 
alias ld='ls -d */'                 # es only Dirs
alias l.='ls -dAFh .[^.]*'          # ls only Dotfiles
alias lst='ls -hFtal | grep $(date +%Y-%m-%d)' #ls Today

alias cs_files='find . -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" -o -name "*.S" > cscope.files'
alias cs_build='cscope -q -R -b -i cscope.files'

#alias tree='tree -Cs'              # nice alternative to 'ls'
alias vim='vim -X -p'
alias vi='vim'
#alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias df='df -kTh'
alias ln='ln -i -n'
alias psg='ps -ef | grep $1'
alias h='history | grep $1'
alias j='jobs'
alias less='less -R --tabs=4'       # colorful 'less', tab stops = 4
alias more='less'
alias mkdir='mkdir -p -v'
alias reload='source ~/.bashrc'
alias wget='wget --progress=bar -c'
alias which='type -a'
alias quota='quota'
alias grep='grep --color'
alias removesvn='find . -depth -name .svn -exec rm -rf {} \;'
alias ctagsdb='ctags -R *'
alias ctags_list_func='ctags -x --c-kinds=fp'
alias indent='indent -kr -i8 -cli8 -nut -ut'

# have to check exist()
alias top='htop'
alias xmllint='xmllint --noout'

#export GREP_OPTIONS="--exclude-dir=\*/.svn/\* --exclude=\*~ --exclude=\*.swp"
#alias wcgrep='wcgrep -inh --colour=auto' has been defined in wcgrep
alias diff='colordiff -ruN --exclude=".gitignore" --exclude=".svn" --exclude=".git"'
#alias diff='colordiff.pl'

# Moving around & all that jazz
#alias cd='pushd > /dev/null' 
#alias back='popd > /dev/null'
alias b='cd -' # back to $OLDPWD
alias cd..='cd ..'

alias path='echo -e ${PATH//:/\\n}'
# Generate Windows CIFS path prepend with Network Drive id: "Z:"
alias pwd-win='pwd | sed '"'"'s/\//\\/g'"'"' | sed '"'"'s/\(.*\)/Z:\1/'"'"''
# A simple python http file server
alias hfs='python -m SimpleHTTPServer 8080'

#Personal Help
alias l?='cat ~/.bashrc | grep "alias l.*=.ls" | grep ^a' 
alias a?='alias'
alias f?='cat $dotfiles/.function.help'
alias dn='OPTIONS=$(\ls -F | grep /$); select s in $OPTIONS; do cd $PWD/$s; break;done'
#alias help='OPTIONS=$(\ls $dotfiles/.tips -F);select s in $OPTIONS; do less $dotfiles/.tips/$s; break;done' 

#delete
alias del='mv --target-directory=$HOME/.Trash/'

#aliases and export for Project
alias pcd='cd ${PRODUCTDIR}'
alias icd='cd ${IMAGEDIR}'
alias scd='cd ${PRODUCTDIR}/build/scripts'
alias rcd='cd ${PRODUCTDIR}/release;pwd'
alias pd='echo ${PRODUCTDIR}'
alias rmrd='[ -n "$PRODUCTDIR" ] && cd ${PRODUCTDIR}/release; rm -rf app_cluster_Build/ flashfs/ rootfs/; cd -'

#make for fun
alias make='make'
alias m='make'
alias mc='m clean'
alias mca='m cleanall'
alias mi='m install'
alias mall='mca && m && mi'

#astyle
alias astyle='astyle --style=allman --indent-switches --indent=spaces --indent-labels --indent-preprocessor -p -U'
#gcc
alias agcc='arm-linux-gcc -Wall -g3 -fno-omit-frame-pointer -fno-inline -Wcast-align -Wpadded -Wpacked -std=gnu99'
alias gcc='gcc -Wall -g3 -fno-omit-frame-pointer -fno-inline -Wcast-align -Wpadded -Wpacked -std=gnu99'
alias objdump='objdump -d -S -hrt'
alias gdb='gdb --command=$HOME/.gdbinit'
#alias strace='strace -f -v -x -s 128'

# ssh proxy
alias ssh_proxy='ssh -o ProxyCommand="/usr/bin/corkscrew 192.168.0.101 1080 %h %p"'

#Lint related
#exist jsl  && alias jsl='jsl -conf ~/Tools/jsl.conf -process'
exist jsl  && alias jsl='jsl -process'
if exist lint ; then
    alias lint-gnu='lint ~/makcomm/env-vim.lnt'
    alias lint-gnu-xml='lint-gnu ~/makcomm/env-xml.lnt'
    alias lint-gnu-html='lint-gnu ~/makcomm/env-html.lnt'
    alias lint-arm='lint ~/makcomm/env-vim.lnt'
    alias lint-arm-xml='lint-arm ~/makcomm/env-xml.lnt'
    alias lint-arm-html='lint-arm ~/makcomm/env-html.lnt'
fi

# ccache & distcc
alias enjoy-ccache-distcc="source $HOME/Tools/use_distcc_ccache"

# enjoy proxy
alias enjoy-proxy="source $HOME/Tools/use_proxy"

#######################
# Bash SHell opts     # 
#######################

#history control, ignorespace & ignoredups
export HISTCONTROL=ignoreboth
export HISTSIZE=100000
export HISTTIMEFORMAT="%Y-%m-%d_%H:%M:%S_%a  "
export HISTIGNORE="&:bg:fg:ll:h"

#Specify that it (Ctrl+D) must pressed twice to exit Bash
export IGNOREEOF=1

set +o noclobber 
set -o notify
#set -o xtrace          # Useful for debuging.

# Enable options:
# check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
shopt -s checkwinsize
shopt -s histappend
shopt -s no_empty_cmd_completion
shopt -s cdspell
shopt -s checkhash

#######################
# Default             # 
#######################

# Define Colors {{{
TXTBLK="\[\033[0;30m\]" # Black - Regular
TXTRED="\[\033[0;31m\]" # Red
TXTGRN="\[\033[0;32m\]" # Green
TXTYLW="\[\033[0;33m\]" # Yellow
TXTBLU="\[\033[0;34m\]" # Blue
TXTPUR="\[\033[0;35m\]" # Purple
TXTCYN="\[\033[0;36m\]" # Cyan
TXTWHT="\[\033[0;37m\]" # White
BLDBLK="\[\033[1;30m\]" # Black - Bold
BLDRED="\[\033[1;31m\]" # Red
BLDGRN="\[\033[1;32m\]" # Green
BLDYLW="\[\033[1;33m\]" # Yellow
BLDBLU="\[\033[1;34m\]" # Blue
BLDPUR="\[\033[1;35m\]" # Purple
BLDCYN="\[\033[1;36m\]" # Cyan
BLDWHT="\[\033[1;37m\]" # White
UNDBLK="\[\033[4;30m\]" # Black - Underline
UNDRED="\[\033[4;31m\]" # Red
UNDGRN="\[\033[4;32m\]" # Green
UNDYLW="\[\033[4;33m\]" # Yellow
UNDBLU="\[\033[4;34m\]" # Blue
UNDPUR="\[\033[4;35m\]" # Purple
UNDCYN="\[\033[4;36m\]" # Cyan
UNDWHT="\[\033[4;37m\]" # White
BAKBLK="\[\033[40m\]"   # Black - Background
BAKRED="\[\033[41m\]"   # Red
BAKGRN="\[\033[42m\]"   # Green
BAKYLW="\[\033[43m\]"   # Yellow
BAKBLU="\[\033[44m\]"   # Blue
BAKPUR="\[\033[45m\]"   # Purple
BAKCYN="\[\033[46m\]"   # Cyan
BAKWHT="\[\033[47m\]"   # White
TXTRST="\[\033[0m\]"    # Text Reset
# }}}

case $OS in
    Darwin|*BSD)
        PROMPT_HOSTCOLOR=$TXTRED
        ;;
    Linux)
        PROMPT_HOSTCOLOR=$TXTPUR
        ;;
esac

function PROMPT_GIT() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return;
  echo " ("${ref#refs/heads/}")";
}


#PS1=$TXTYLW'\u'$TXTWHT'@'${PROMPT_HOSTCOLOR}'\h'$TXTWHT':'$TXTGRN'\W'$TXTWHT${PROMPT_GIT}$TXTGRN'$(counter)'$TXTGRN' >'$BLDGRN'>'$BLDWHT'> '$TXTWHT
PS1=$TXTYLW'\u'$TXTWHT'@'${PROMPT_HOSTCOLOR}'\h'$TXTWHT':'$TXTGRN'\W'$TXTCYN'$(PROMPT_GIT)'$TXTGRN'$(counter)'$TXTGRN' >'$BLDGRN'>'$BLDWHT'> '$TXTWHT

# add for screen to dynamically update title
#PROMPT_COMMAND='echo -n -e "\033k\033\134"'


export PROMPT_COMMAND='history -a'

#export MANPAGER="most -s"
# For colourful man pages (CLUG-Wiki style)
#export LESS_TERMCAP_mb=$'\E[01;31m'
#export LESS_TERMCAP_md=$'\E[01;31m'
#export LESS_TERMCAP_me=$'\E[0m'
#export LESS_TERMCAP_se=$'\E[0m'
#export LESS_TERMCAP_so=$'\E[01;44;33m'
#export LESS_TERMCAP_ue=$'\E[0m'
#export LESS_TERMCAP_us=$'\E[01;32m'

#for X-Win32
#export DISPLAY="172.16.2.54:0:0"

# For all SSH (Reverse) Tunnel
case $OS in
    Darwin|*BSD)
        alias dd-wrt='ssh 192.168.1.1 -p2222 -lroot'
        alias dd-wrt_rd1-2='ssh -L 7322:127.0.0.1:7322 192.168.1.1 -lmark -p22'
        alias rd1-2='ssh localhost -p 7322 -lmark'
        alias rd1-2-proxy='ssh -D 8080 localhost -p7322'
		alias ssh-tunnel-brix='ssh -NfR 8080:127.0.0.1:22 marktseng.synology.me -lmark'
        alias ssh-reverse-vc66='ssh localhost -p 8080 -lmark'
        ;;

    Linux)
		alias ssh-tunnel-brix='ssh -o TCPKeepAlive=yes -o ServerAliveInterval=1 -NfR 8080:127.0.0.1:22 marktseng.synology.me -lmark'
        alias ssh-reverse-vc66='ssh localhost -p 8080 -lmark'

        #alias syncToRD1-3='rsync -r -a -v -e "ssh -l kent" --delete ~/Tools rd1-3:Tools'
        #alias syncToMac='rsync -r -a -v -e "ssh -l kent" --delete ~/Tools chenkaie.no-ip.org:RD1-2/Tools'
        ;;
esac

# make less more friendly for non-text input files, see lesspipe(1)
exist lesspipe && eval "$(lesspipe)"

#export LESS='-i -N -w  -z-4 -g -e -M -X -F -R -P%t?f%f :stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'

#######################
# Functions           # 
#######################

# git loop

function git_pull_loop()
{
	for dir in `ls`; do cd $dir ; git pull ; cd .. ;done
}

# kill ssh revers port number
function ssh-tunnel-portkill
{
    PORT_PID=` sudo netstat -plant | grep 8080 | awk '{print $7}' | awk -F'/' '{print $1}' `
    for PID in $PORT_PID
    do
        kill -9 $PID
    done
}

# Easy extract
extract () 
{
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

untar ()
{
	if [ -n "$1" ] ; then
		OPT=$1
		FILE=$2
		pv $FILE | tar $OPT -
	else
		echo "usage: untar tar_option file_name"
	fi
}

# easy compress - archive wrapper
compress ()
{
    if [ -n "$1" ] ; then
        FILE=$1
        case $FILE in
        *.tar) shift && tar cf $FILE $* ;;
        *.tar.bz2) shift && tar cjf $FILE $* ;;
        *.tar.gz) shift && tar czf $FILE $* ;;
        *.tgz) shift && tar czf $FILE $* ;;
        *.zip) shift && zip $FILE $* ;;
        *.rar) shift && rar $FILE $* ;;
        esac
    else
        echo "usage: compress <foo.tar.gz> ./foo ./bar"
    fi
}

# get current host related info
function sysinfo()
{
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Memory stats :$NC " ; free
    echo -e "\n${RED}Local IP Address :$NC" ; myip
}

function counter()
{
    case $1 in *-h*) echo "(jobnum|dirnum)" ;; esac

    jobnum="$(jobs | wc -l | tr -d " ")"
    dirnum="$(dirs -v | tail -n 1 | awk '{print $1}')"

    if [ `expr $jobnum + $dirnum` -gt 0 ]; then
        echo -n " (${jobnum}/${dirnum})"
    fi
}

function set2env()
{
	export PATH=$PWD:$PATH
}

function code2html()
{
	INPUT_FILE=$1
	OUTPUT_FILE=$2
	if [ $# -lt 2 ];then
		echo "code2html input_file output_file"
	else	
		if [ -x /usr/bin/pygmentize ];then
			pygmentize -f html -O full -o $OUTPUT_FILE $INPUT_FILE
		else
			sudo apt-get -y install python-pygments
		fi
	fi
}

## set MIPS toolchain ##
export PATH=/home/mark/mstar_workshop/toolchain/gcc-linaro-arm-linux-gnueabihf-4.8-2014.04_linux/bin:$PATH
#######################

## set my tools ##
export PATH=$HOME/linux-rcfiles/bin:$HOME/linux-rcfiles/sbin:$PATH
#######################

## set NIKE tools ##
export PATH=$HOME/linux-rcfiles/nike-tools:$PATH
#######################

## set CCACHE #########
export USE_CCACHE=1
export CCACHE_DIR=/dev/shm/ccachePool
case $OS in
    Darwin|*BSD)
    ;;

    Linux)
	#ccache -M 5G
    ;;
esac

#######################

## MAKEFLAGS ##########
# export MAKEFLAGS="-j $(grep -c ^processor /proc/cpuinfo)"
#######################

##  skip unknow stty key ##
stty erase ^?
#######################

## lua-5.1 environment ##
export LUA_DIR=/usr/local
export LUA_LIBDIR=$LUA_DIR/lib/lua/5.1
export LUA_SHAREDIR=$LUA_DIR/share/lua/5.1
export LUA_CPATH="?.so;$LUA_LIBDIR/?.so"
export LUA_PATH="?.lua;$LUA_SHAREDIR/?.lua"                     
#######################


## for sunplus hi3 ##
LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:';
export LS_COLORS

#####################
# vim: fdm=marker ts=4 sw=4 et:

## Xming-win32 setting ##########
#export DISPLAY=172.23.36.199:0.0
#################################

## set localization ###
#export LANG=C
#export LC_ALL=C
#######################

## powerline ##########
#function _update_ps1() {
#	export PS1="$(~/powerline-shell.py $? 2> /dev/null)"
#}

#export PROMPT_COMMAND="_update_ps1"
#######################

## cowsay #############
case $OS in
    Darwin|*BSD)
	[[ "$PS1" ]] && /usr/local/bin/fortune | /usr/local/bin/cowsay -n
    ;;

    Linux)
	[[ "$PS1" ]] && /usr/games/fortune | /usr/games/cowsay -n
    ;;
esac
#######################

## android setting ####
export ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4g"
#######################

## python setting #####
export PYTHONSTARTUP="$HOME/.pythonstartup.py" 
#######################

## nodejs setting #####
#export NODE_PATH="'$(npm root -g)'"
#######################

## pkg-config #########
export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig
#######################

## go env #############
export GOPATH="$HOME/GoPath"
export GOBIN=$GOPATH/bin
export PATH=$GOBIN:$PATH
#######################


## cargo env ##########
export PATH=$HOME/.cargo/bin:$PATH
#######################

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/mark/speechToText/google-cloud-sdk/path.bash.inc' ]; then . '/home/mark/speechToText/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/mark/speechToText/google-cloud-sdk/completion.bash.inc' ]; then . '/home/mark/speechToText/google-cloud-sdk/completion.bash.inc'; fi

## JDK options #########
export BAZEL_JAVAC_OPTS="-J-Xms384m -J-Xmx1024m" 
export JAVA_TOOL_OPTS="-Xmx1024m" 
export EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk"
########################
## TRANSMISSION ########
alias t-daemon-start='sudo service transmission-daemon start'
alias t-daemon-stop='sudo service transmission-daemon stop'
alias t-daemon-reload='sudo service transmission-daemon reload'
alias t-daemon-quit='transmission-remote -n 'transmission:transmission' -q'
alias t-list='transmission-remote -n 'transmission:transmission' -l'
alias t-basicstats='transmission-remote -n 'transmission:transmission' -st'
alias t-fullstats='transmission-remote -n 'transmission:transmission' -si'
alias t-add='transmission-remote -n 'transmission:transmission' -a '
alias t-all-start='transmission-remote -n 'transmission:transmission' -s'
alias t-all-stop='transmission-remote -n 'transmission:transmission' -S'
alias t-remove-all='transmission-remote -n 'transmission:transmission' -r'
alias t-remote-cli='transmission-remote-cli -c transmission:transmission@localhost:9091'
########################
### QEMU LD_PREFIX ####
export QEMU_LD_PREFIX=/usr/aarch64-linux-gnu
#######################

# run neofetch
/usr/bin/neofetch

# run fish
exec /usr/bin/fish
